<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categoria: ferramentas | seisxis]]></title>
  <link href="http://www.seisxis.com/blog/categories/ferramentas/atom.xml" rel="self"/>
  <link href="http://www.seisxis.com/"/>
  <updated>2012-06-18T16:26:02-03:00</updated>
  <id>http://www.seisxis.com/</id>
  <author>
    <name><![CDATA[Junior Andrade]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ferramentas do Desenvolvedor Moderno: Sparkup e Zen-Coding]]></title>
    <link href="http://www.seisxis.com/blog/2012/06/03/ferramentas-do-desenvolvedor-moderno-sparkup-e-zen-coding/"/>
    <updated>2012-06-03T22:38:00-03:00</updated>
    <id>http://www.seisxis.com/blog/2012/06/03/ferramentas-do-desenvolvedor-moderno-sparkup-e-zen-coding</id>
    <content type="html"><![CDATA[<p>
Escrever páginas em HTML pode ser uma tarefa bastante repetitiva... não com <a href="https://github.com/rstacruz/sparkup" target="_blank">Sparkup</a> ou <a href="http://code.google.com/p/zen-coding/" target="_blank">Zen-Coding</a>! Ambas são ferramentas que simplificam a sintaxe do HTML agindo como snippets, proporcionando escrever longos blocos de código em uma velocidade impressionante, consequentemente aumentará a produtividade, algo ideal para programadores de front-end.</p>




<p>Tratam-se de plugins que podem ser instalados em diversos ides/editores de texto (é preciso ver a compatibilidade de cada um). O Sparkup é inspirado no Zen-Coding e traz algumas melhorias, em contra-partida, o Zen-Coding possui maior compatibilidade de editores em que pode-se instala-lo. Irei falar um pouco mais sobre ambos plugins.<p>

<p>Para os exemplos demonstrados abaixo, estou utilizando o <a href="http://code.google.com/p/macvim/" target="_blank">MacVim</a>  (GUI do VIM para MacOSX).</p>


<h2>Zen-Coding: maior compatibilidade</h2>
<p>o Zen-Coding possui uma grande lista de softwares compatíveis, entre eles, ferramentas exclusivas de Windows (Notepad++, PSPad) e MacOSX (Textmate, Coda, Espresso), o que torna-o uma boa escolha. Também é suportados ferramentas <a href="http://en.wikipedia.org/wiki/Cross-platform" target="_blank">cross-plataform</a>, entre elas ferramentas que funcionam em Linux (Vim, Eclipse, Komodo Edit/IDE), então usuários de linux não tem o que se preocupar. o Zen-Coding também possui uma variação maior de snippets podendo ate ser utilizado para escrever CSS e XSI.</p>

<p>O funcionamento é bastante simples, basta escrever em uma linha o código de semântica abreviada e utilizar alguma tecla para disparar a ação, e o plugin converterá esta linha no bloco completo correspondente ao que foi escrito. Vejamos alguns exemplos:
</p>

<p>Escrevendo a linha abaixo e pressionando <code>ctrl+e</code> (no caso do MacVim):</p>

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>div#pagina&gt;div.logo+ul#menu&gt;li*5&gt;a
</span></code></pre></td></tr></table></div></figure></notextile></div>

será convertido em :

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;pagina&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;logo&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;menu&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>

<h2>Sparkup: Um recurso interessante</h2>
<p>O Sparkup foi inspirado no Zen-Coding e trás algumas melhorias, contudo apenas o Textmate e o Vim são editores de texto suportados oficialmente (até agora). O recurso mais notável é poder escrever <code>></code> e <code><</code> entre um node e outro para referenciar quando deseja que o próximo node seja inserido dentro ou fora do node antecessor, respectivamente. Isto faz com que seja possível escrever a estrutura de uma página inteira em poucos segundos. Em termos gerais, seu funcionamento é igual ao Zen-Coding. Vejamos alguns recursos do Sparkup demonstrados em um único exemplo:</p>

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>div#wrap &gt; div#header &gt; div#logo &gt; h1{seisxis.com} <span class="nt">&lt; div</span><span class="err">#</span><span class="na">menu</span> <span class="nt">&gt;</span> ul &gt; li.item-$*3 <span class="err">&lt;&lt;</span><span class="nt">&lt; div</span><span class="err">#</span><span class="na">content</span> <span class="err">+</span> <span class="na">div</span><span class="err">#</span><span class="na">footer</span> <span class="nt">&gt;</span> p{copyright 2012}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;wrap&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;logo&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h1&gt;</span>seisxis.com<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;menu&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;item-1&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;item-2&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;item-3&quot;</span><span class="nt">&gt;&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;footer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>copyright 2012<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2>Então, qual é o melhor?</h2>
<p>Ambos são bastante similares, porém não ha como negar que recurso presente no Sparkup de poder prosseguir e retornar dentro dos nodes é uma vantagem de peso sobre o Zen-Coding. Particularmente, este é o meu preferido. Porém, pode ser um pouco frustrante para algumas pessoas não poder instala-lo, já que apenas o Textmate e o Vim são suportados oficialmente. Como ambos tem recuros similares, o Zen-Coding pode ser sim uma ótima alternativa para quem não poder instalar o Sparkup, já que o poder da ferramenta não se limita apenas a um este recurso. Vale muito utilizar algum dos dois e perceber a produtividade decolar.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ferramentas do Desenvolvedor Moderno: Python LiveReload]]></title>
    <link href="http://www.seisxis.com/blog/2012/05/31/ferramentas-do-desenvolvedor-moderno-python-livereload/"/>
    <updated>2012-05-31T22:16:00-03:00</updated>
    <id>http://www.seisxis.com/blog/2012/05/31/ferramentas-do-desenvolvedor-moderno-python-livereload</id>
    <content type="html"><![CDATA[<p>
Esta sem dúvidas é uma ferramenta bastante interessante, ela irá ajudar na tarefa chata de atualizar o navegador sempre que houver uma mudança nos arquivos front-end da aplicação, isto quer dizer, que sempre que você alterar conteúdo de um arquivo, seu browser automaticamente irá ser atualizado, agilizando mais o trabalho. Atualmente é suportado vários tipos de arquivo como: css, less, javascript, coffescript, etc. <a href="https://github.com/lepture/python-livereload" target="_blank">Python LiveReload</a> é o server escrito em python do aplicativo <a href="http://livereload.com" target="_blank">LiveReload</a> disponível atualmente para MacOSX e Windows. Escolhi apresentar esta por ser grátis.
</p>




<p>
    Gostaria de ressaltar, que apesar da ferramenta ser operada através de linha de comando e python, e o próprio desenvolvedor citar "Python LiveReload is designed for web developers who know Python", além de simples pode ser utilizada para qualquer propósito.
</p>




<h2>Instalação</h2>




<p>
    Se você esta em ambiente MacOSX ou Linux, este passo se torna ainda mais simples pois estes sistemas operacionais ja tem Python instalado. Caso seja ambiente Windows basta instalar <a href="http://www.python.org/download/" target="_blank">Python 2.7</a> ou superior. Também recomendo instalação do pacote <a href="http://pypi.python.org/pypi/pip" target="_blank">Pip</a>.
</p>




<p>
Para instalação execute o comando:

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pip install livereload</span></code></pre></td></tr></table></div></figure></notextile></div>

ou

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>easy_install install livereload</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>




<h2>Extensão no seu navegador</h2>


<p>
    Será necessário instalar uma extensão no navegador que você utiliza. O download pode ser feito <a href="http://help.livereload.com/kb/general-use/browser-extensions" target="_blank">nesta página</a>.
</p>




<p>
    Para iniciar o servidor que irá escutar as alterações nos documentos, é bem simples, e pode ser feito de duas maneiras: Escutando tudo, ou personalizando com um <a href="https://github.com/guard/guard" target="_blank">guardfile</a>. No caso do uso do guardfile, será necessário ter algum conhecimento em python, citarei um pouco mais a respeito a seguir.
</p>




<h2>Inicializando o servidor normalmente</h2>




<p>
    Para inicializar o servidor escutando tudo, basta executar o seguinte comando:
    
    <div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>livereload</span></code></pre></td></tr></table></div></figure></notextile></div> 

    Em seguida deve-se acionar no botão da extensão <img src="/images/posts/pic1.jpg" title="Botão da extensão do LiveReload" > instalado no seu navegador. Caso seu navegador seja Google Chrome, e você estiver fazendo isto localmente, é necessário marcar o checkbox: Allow access to file URLs.
</p>




<p>
    <img src="/images/posts/pic3.jpg" title="Extensão LiveReload no Google Chrome" >
</p>




<p>
    Caso seu terminal fique semelhante como a figura abaixo, tudo deu certo, experimente alterar documentos que estão abertos no seu navegador para notar que as mudanças ocorrem imediatamente, sem necessidade de atualizar a página manualmente.
</p>




<p>
      <img src="/images/posts/pic2.jpg" title="Terminal com LiveReload rodando" >
</p>




<h2>Guardfile</h2>




<p>
    Desta maneira, o poder da ferramenta vai além do que foi citado até aqui. É possível criar funções para executar tarefas mais complexas, como por exemplo compilar seu script .less para .css antes que o navegador seja atualizado ou definir quais arquivos ou tipos serão escutados pelo servidor. Neste ponto, vale apena ler a <a href="http://livereload.readthedocs.org/en/latest/guardfile.html" target="_blank">documentação oficial</a> para maior compreendimento. Para maior aproveitamento é necessário conhecimento em python.
</p>




<p>
Para exemplo, iremos criar um guardfile em que apenas os documentos .html e .js serão escutados pelo servidor:

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>guardfile.py  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">livereload.task</span> <span class="kn">import</span> <span class="n">Task</span>
</span><span class='line'>
</span><span class='line'><span class="n">Task</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s">&#39;*.html&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">Task</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s">&#39;/static/js/*.js&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>

<p>
Para inicializar o servidor com o guardfile, basta executar o como mostrado abaixo, ao invés da maneira anterior.

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>livereload /caminho/do/meu/guardfile.py</span></code></pre></td></tr></table></div></figure></notextile></div> 
</p>

]]></content>
  </entry>
  
</feed>
